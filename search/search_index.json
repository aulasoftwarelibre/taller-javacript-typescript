{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inicio \u00b6 Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . El contenido del mismo es en parte de producci\u00f3n propia, en parte de otros manuales libres que pueden encontrarse en la secci\u00f3n de Referencias. Contenido \u00b6 Introducci\u00f3n Bases de JavaScript TypeScript: Ventajas y diferencias Creaci\u00f3n de nuestro primer proyecto Referencias Agradecimientos \u00b6 Este curso ha sido impartido por las siguientes personas: Antonio Moruno David P\u00e9rez Licencia \u00b6 El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Inicio"},{"location":"#inicio","text":"Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . El contenido del mismo es en parte de producci\u00f3n propia, en parte de otros manuales libres que pueden encontrarse en la secci\u00f3n de Referencias.","title":"Inicio"},{"location":"#contenido","text":"Introducci\u00f3n Bases de JavaScript TypeScript: Ventajas y diferencias Creaci\u00f3n de nuestro primer proyecto Referencias","title":"Contenido"},{"location":"#agradecimientos","text":"Este curso ha sido impartido por las siguientes personas: Antonio Moruno David P\u00e9rez","title":"Agradecimientos"},{"location":"#licencia","text":"El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Licencia"},{"location":"introduccion/","text":"Introducci\u00f3n \u00b6 JavaScript \u00b6 JavaScript (JS) es un lenguaje de programaci\u00f3n interpretado , d\u00e9bilmente tipado y din\u00e1mico , utilizado por millones de personas en todo el mundo. Su principal utilidad se da en el lado del cliente, aunque cada vez m\u00e1s se utiliza en el lado del servidor (por ejemplo Node.js). No solo es un lenguaje de programaci\u00f3n orientado a objetos, sino que es multiparadigma, permitiendo \"crear programas usando m\u00e1s de un estilo de programaci\u00f3n\", tales como imperativo, funcional, etc. Cabe destacar que este lenguaje de programaci\u00f3n va acompa\u00f1ado de ECMASCRIPT. Realmente, este est\u00e1ndar y JavaScript (a efectos pr\u00e1cticos) son lo mismo. Este est\u00e1ndar es una especificaci\u00f3n de JavaScript, el cual actualmente se encuentra en su 11\u00ba versi\u00f3n, publicada en 2020. Si bien es cierto que la \u00faltima versi\u00f3n relevante fue ECMASCRIPT 6, la cual introdujo numerosos cambios con respecto a su versi\u00f3n anterior. Y \u00bfen qu\u00e9 nos afecta a nosotros este est\u00e1ndar? Bueno, pr\u00e1cticamente todos los navegadores incluyen una implementaci\u00f3n de ECMASCRIPT, pudiendo estos interpretar c\u00f3digo JavaScript. No obstante, no todos los navegadores \"entienden\" JavaScript de la misma forma: cada uno cuenta con su propio motor de JavaScript e implementan una versi\u00f3n de ECMASCRIPT distinta. Por ello, contamos con una versi\u00f3n est\u00e1ndar que nos asegura que todos los navegadores la soportar\u00e1n: ECMASCRIPT 5. Esto nos ayuda a que, si desarrollamos ajust\u00e1ndonos a este est\u00e1ndar, nuestro c\u00f3digo pueda correr sin problemas en cualquier navegador. Warning JavaScript != Java . El primero fue nombrado as\u00ed debido a la popularidad en aquel momento del lenguaje Java, pero estos lenguajes cuentan con sintaxis, sem\u00e1ntica y prop\u00f3sitos distintos. TypeScript \u00b6 Para comprender qu\u00e9 es y de d\u00f3nde viene TypeScript, debemos comprender bien la historia de JavaScript. Al principio, JavaScript era utilizado simplemente para escribir programas de pocas l\u00edneas de c\u00f3digo, para utilizarlo de forma embebida en una p\u00e1gina web y aportar peque\u00f1as funcionalidades. Sin embargo, este lenguaje se fue utilizando por cada vez m\u00e1s desarrolladores, incrementando su uso y popularidad en gran medida. \u00bfCu\u00e1l es el problema? Muy simple: ning\u00fan lenguaje es perfecto y, en nuestro caso, JavaScript tampoco. Podemos, por ejemplo realizar la siguiente comprobaci\u00f3n \"\" == 0 y ser\u00eda true , podriamos igualar variables que al principio eran n\u00fameros a cadenas, trabajar con propiedades de objetos inexistentes, etc. Es por ello por lo que aparece TypeScript. TypeScript (TS) es un lenguaje dise\u00f1ado por Microsoft, el cual puede ser considerado como un superset de JavaScript. Es decir todo el c\u00f3digo JavaScript es c\u00f3digo TypeScript v\u00e1lido, y no al rev\u00e9s . Este lenguaje nos aporta un tipado estricto y est\u00e1tico, es decir, podemos comprobar errores antes de ejecutar el programa. Es importante entender que el c\u00f3digo TypeScript no se ejecuta, sino que este se transpila al lenguaje JavaScript. Al transpilarlo, este tipado de datos se elimina, ya que el \u00fanico prop\u00f3sito de dotar de tipos a las variables es la comprobaci\u00f3n de errores antes de la ejecuci\u00f3n de nuestro c\u00f3digo. Una vez que \"compilamos\" nuestro c\u00f3digo, el archivo JavaScript resultante no posee informaci\u00f3n referente al tipado. Tambi\u00e9n podemos deducir que el comportamiento en tiempo de ejecuci\u00f3n de nuestro c\u00f3digo no cambiar\u00e1 si usamos JavaScript o TypeScript. En las siguientes secciones del taller especificaremos con ejemplos las diferencias y las funcionalidades extra que nos ofrece TypeScript con respecto a JavaScript.","title":"Introducci\u00f3n"},{"location":"introduccion/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"introduccion/#javascript","text":"JavaScript (JS) es un lenguaje de programaci\u00f3n interpretado , d\u00e9bilmente tipado y din\u00e1mico , utilizado por millones de personas en todo el mundo. Su principal utilidad se da en el lado del cliente, aunque cada vez m\u00e1s se utiliza en el lado del servidor (por ejemplo Node.js). No solo es un lenguaje de programaci\u00f3n orientado a objetos, sino que es multiparadigma, permitiendo \"crear programas usando m\u00e1s de un estilo de programaci\u00f3n\", tales como imperativo, funcional, etc. Cabe destacar que este lenguaje de programaci\u00f3n va acompa\u00f1ado de ECMASCRIPT. Realmente, este est\u00e1ndar y JavaScript (a efectos pr\u00e1cticos) son lo mismo. Este est\u00e1ndar es una especificaci\u00f3n de JavaScript, el cual actualmente se encuentra en su 11\u00ba versi\u00f3n, publicada en 2020. Si bien es cierto que la \u00faltima versi\u00f3n relevante fue ECMASCRIPT 6, la cual introdujo numerosos cambios con respecto a su versi\u00f3n anterior. Y \u00bfen qu\u00e9 nos afecta a nosotros este est\u00e1ndar? Bueno, pr\u00e1cticamente todos los navegadores incluyen una implementaci\u00f3n de ECMASCRIPT, pudiendo estos interpretar c\u00f3digo JavaScript. No obstante, no todos los navegadores \"entienden\" JavaScript de la misma forma: cada uno cuenta con su propio motor de JavaScript e implementan una versi\u00f3n de ECMASCRIPT distinta. Por ello, contamos con una versi\u00f3n est\u00e1ndar que nos asegura que todos los navegadores la soportar\u00e1n: ECMASCRIPT 5. Esto nos ayuda a que, si desarrollamos ajust\u00e1ndonos a este est\u00e1ndar, nuestro c\u00f3digo pueda correr sin problemas en cualquier navegador. Warning JavaScript != Java . El primero fue nombrado as\u00ed debido a la popularidad en aquel momento del lenguaje Java, pero estos lenguajes cuentan con sintaxis, sem\u00e1ntica y prop\u00f3sitos distintos.","title":"JavaScript"},{"location":"introduccion/#typescript","text":"Para comprender qu\u00e9 es y de d\u00f3nde viene TypeScript, debemos comprender bien la historia de JavaScript. Al principio, JavaScript era utilizado simplemente para escribir programas de pocas l\u00edneas de c\u00f3digo, para utilizarlo de forma embebida en una p\u00e1gina web y aportar peque\u00f1as funcionalidades. Sin embargo, este lenguaje se fue utilizando por cada vez m\u00e1s desarrolladores, incrementando su uso y popularidad en gran medida. \u00bfCu\u00e1l es el problema? Muy simple: ning\u00fan lenguaje es perfecto y, en nuestro caso, JavaScript tampoco. Podemos, por ejemplo realizar la siguiente comprobaci\u00f3n \"\" == 0 y ser\u00eda true , podriamos igualar variables que al principio eran n\u00fameros a cadenas, trabajar con propiedades de objetos inexistentes, etc. Es por ello por lo que aparece TypeScript. TypeScript (TS) es un lenguaje dise\u00f1ado por Microsoft, el cual puede ser considerado como un superset de JavaScript. Es decir todo el c\u00f3digo JavaScript es c\u00f3digo TypeScript v\u00e1lido, y no al rev\u00e9s . Este lenguaje nos aporta un tipado estricto y est\u00e1tico, es decir, podemos comprobar errores antes de ejecutar el programa. Es importante entender que el c\u00f3digo TypeScript no se ejecuta, sino que este se transpila al lenguaje JavaScript. Al transpilarlo, este tipado de datos se elimina, ya que el \u00fanico prop\u00f3sito de dotar de tipos a las variables es la comprobaci\u00f3n de errores antes de la ejecuci\u00f3n de nuestro c\u00f3digo. Una vez que \"compilamos\" nuestro c\u00f3digo, el archivo JavaScript resultante no posee informaci\u00f3n referente al tipado. Tambi\u00e9n podemos deducir que el comportamiento en tiempo de ejecuci\u00f3n de nuestro c\u00f3digo no cambiar\u00e1 si usamos JavaScript o TypeScript. En las siguientes secciones del taller especificaremos con ejemplos las diferencias y las funcionalidades extra que nos ofrece TypeScript con respecto a JavaScript.","title":"TypeScript"},{"location":"javascript/","text":"JavaScript \u00b6 Antes de entrar a ver todas las ventajas y funcionalidades que nos aporta el uso de TypeScript, vamos a repasar las bases de JavaScript para entender bien el funcionamiento b\u00e1sico de este lenguaje. Variables \u00b6 Una de las car\u00e1cter\u00edsticas m\u00e1s peculiares de JavaScript es que es un lenguaje con un tipado d\u00e9bil. Para entender esto, pongamos el ejemplo de C++. En este lenguaje, al declarar una variable le estamos infiriendo el tipo de dato autom\u00e1ticamente. Por ejemplo, al escribir int a estamos declarando la variable a y a su vez le estamos dando un tipo (entero). Por el contrario, en JavaScript esto no ocurre. En JavaScript cuando declaramos una variable no le indicamos el tipo de esta. Para declararlas utilizaremos 2 palabras clave: const para constantes let para variables Si declaramos una variable como const y despu\u00e9s la intentamos modificar, nos dar\u00eda error. Warning Tambi\u00e9n podemos declarar variables con la palabra reservada var . Esto ya no se hace actualmente, ya que permit\u00eda redeclarar variables y utilizar variables antes de que estas fueran declaradas, entre otras cosas. Desde ES6 esta forma de declarar variables se considera obsoleta, no habiendo raz\u00f3n ninguna para no utilizar let y const en vez de var . Tipos de variables \u00b6 Si bien no indicamos el tipo de dato que tomar\u00e1 la variable, internamente posee un tipo. Este puede ser: N\u00famero number : A diferencia de lenguajes como C o C++, no existen enteros y flotantes, sino que todos los n\u00fameros se tratan igual. Cadena string : Cadenas de texto. Booleano boolean : Pueden tomar el valor true o false . Arreglo array : En algunos lenguajes llamado vector, un arreglo contiene m\u00faltiples valores encapsulados entre corchetes y separados por comas. Se pueden guardar datos de distinto tipo en un array. Objeto object : En JavaScript, un objeto es un tipo de dato el cual podr\u00edamos decir que est\u00e1 compuesto a su vez por varios datos distintos. Por ejemplo, podemos pensar en un objeto Gato , el cual tiene los atributos nombre , edad y sexo . Tambi\u00e9n cabe destacar que este lenguaje posee un tipado din\u00e1mico , es decir, una variable puede tomar valores de distinto tipo sin que esto cause ning\u00fan tipo de error. Operadores y comillas \u00b6 No vamos a ver todos los operadores que soporta JavaScript ya que, si lo hicieramos, el taller ser\u00eda eterno. Pero si que vamos a ver uno muy interesante que no est\u00e1 soportado por algunos lenguajes como C++: el triple igual === . Este operador nos ayuda a comparar datos como el operador == . \u00bfCu\u00e1l es la diferencia? El triple igual devolver\u00e1 true cuando estemos comparando dos datos que sean iguales y del mismo tipo , cosa que no ocurre con el doble igual. Si los datos que estamos comparando tienen el mismo valor pero no el mismo tipo, === nos devolver\u00e1 false . Algunos operadores tambi\u00e9n los podemos utilizar para trabajar con cadenas, como por ejemplo el operador + . Podemos concatenar cadenas con variables utilizando este operador, aunque esto no es recomendable. Para ello, se utilizan las comillas `` , tambi\u00e9n llamadas plantillas literales . Estas nos permiten incrustar expresiones y variables dentro de nuestras cadenas, adem\u00e1s de poder utilizar cadenas de m\u00e1s de una l\u00ednea, entre otras cosas. Para a\u00f1adir a nuestra cadena una variable, hacemos uso de un marcador, representado con ${variable} . Esta \u00faltima forma es mucho mejor que concatenar cadenas con el signo de la suma, ya que nos aporta mucha m\u00e1s flexibilidad. Bucles y condicionales \u00b6 La sintaxis tanto de los condicionales como de los bucles en este lenguaje es bastante simple. Existen los if , else , else if , switch , while y for . Sin embargo, existe un tipo de bucle que no todos los lenguajes poseen y que puede resultar muy interesante, el cual nos ayuda a recorrer elementos dentro de, por ejemplo, un array. Para ello, hacemos uso de la palabra reservada in . Con el ejemplo que se muestra a continuaci\u00f3n, mostrar\u00edamos por pantalla uno a uno los elementos del array array . Funciones \u00b6 En JavaScript, las funciones se declaran con la palabra clave function . Al igual que con las variables, declaramos la funci\u00f3n pero no el tipo de dato que esta va a devolver. Tambi\u00e9n, este lenguaje nos permite guardar estas funciones en variables, las cuales podemos utilizar posteriormente en el c\u00f3digo para llamar a la funci\u00f3n. El c\u00f3digo que se muestra a continuaci\u00f3n muestra 2 formas identicas de declarar una funci\u00f3n add . Hay infinidad de caracter\u00edsticas de las funciones en JavaScript que no veremos en este taller ya que son m\u00e1s espec\u00edficas (palabra clave arguments , \u00e1mbito de las variables, funciones anidadas, par\u00e1metros por defecto, etc.). Lo que s\u00ed veremos son las cada vez m\u00e1s usadas funciones flecha . Estas funciones poseen una sintaxis que puede ser un poco confusa al principio, pero se utilizan de la misma forma y nos ayudan a escribir menos c\u00f3digo de una forma m\u00e1s intuitiva. Consisten en eliminar la palabra clave function , haciendo uso de la flecha => . En el ejemplo de abajo, tambi\u00e9n se muestra el caso en el que nuestra funci\u00f3n simplemente devuelve un valor, por lo que podemos expresar la funci\u00f3n en una sola l\u00ednea y sin return .","title":"JavaScript"},{"location":"javascript/#javascript","text":"Antes de entrar a ver todas las ventajas y funcionalidades que nos aporta el uso de TypeScript, vamos a repasar las bases de JavaScript para entender bien el funcionamiento b\u00e1sico de este lenguaje.","title":"JavaScript"},{"location":"javascript/#variables","text":"Una de las car\u00e1cter\u00edsticas m\u00e1s peculiares de JavaScript es que es un lenguaje con un tipado d\u00e9bil. Para entender esto, pongamos el ejemplo de C++. En este lenguaje, al declarar una variable le estamos infiriendo el tipo de dato autom\u00e1ticamente. Por ejemplo, al escribir int a estamos declarando la variable a y a su vez le estamos dando un tipo (entero). Por el contrario, en JavaScript esto no ocurre. En JavaScript cuando declaramos una variable no le indicamos el tipo de esta. Para declararlas utilizaremos 2 palabras clave: const para constantes let para variables Si declaramos una variable como const y despu\u00e9s la intentamos modificar, nos dar\u00eda error. Warning Tambi\u00e9n podemos declarar variables con la palabra reservada var . Esto ya no se hace actualmente, ya que permit\u00eda redeclarar variables y utilizar variables antes de que estas fueran declaradas, entre otras cosas. Desde ES6 esta forma de declarar variables se considera obsoleta, no habiendo raz\u00f3n ninguna para no utilizar let y const en vez de var .","title":"Variables"},{"location":"javascript/#tipos-de-variables","text":"Si bien no indicamos el tipo de dato que tomar\u00e1 la variable, internamente posee un tipo. Este puede ser: N\u00famero number : A diferencia de lenguajes como C o C++, no existen enteros y flotantes, sino que todos los n\u00fameros se tratan igual. Cadena string : Cadenas de texto. Booleano boolean : Pueden tomar el valor true o false . Arreglo array : En algunos lenguajes llamado vector, un arreglo contiene m\u00faltiples valores encapsulados entre corchetes y separados por comas. Se pueden guardar datos de distinto tipo en un array. Objeto object : En JavaScript, un objeto es un tipo de dato el cual podr\u00edamos decir que est\u00e1 compuesto a su vez por varios datos distintos. Por ejemplo, podemos pensar en un objeto Gato , el cual tiene los atributos nombre , edad y sexo . Tambi\u00e9n cabe destacar que este lenguaje posee un tipado din\u00e1mico , es decir, una variable puede tomar valores de distinto tipo sin que esto cause ning\u00fan tipo de error.","title":"Tipos de variables"},{"location":"javascript/#operadores-y-comillas","text":"No vamos a ver todos los operadores que soporta JavaScript ya que, si lo hicieramos, el taller ser\u00eda eterno. Pero si que vamos a ver uno muy interesante que no est\u00e1 soportado por algunos lenguajes como C++: el triple igual === . Este operador nos ayuda a comparar datos como el operador == . \u00bfCu\u00e1l es la diferencia? El triple igual devolver\u00e1 true cuando estemos comparando dos datos que sean iguales y del mismo tipo , cosa que no ocurre con el doble igual. Si los datos que estamos comparando tienen el mismo valor pero no el mismo tipo, === nos devolver\u00e1 false . Algunos operadores tambi\u00e9n los podemos utilizar para trabajar con cadenas, como por ejemplo el operador + . Podemos concatenar cadenas con variables utilizando este operador, aunque esto no es recomendable. Para ello, se utilizan las comillas `` , tambi\u00e9n llamadas plantillas literales . Estas nos permiten incrustar expresiones y variables dentro de nuestras cadenas, adem\u00e1s de poder utilizar cadenas de m\u00e1s de una l\u00ednea, entre otras cosas. Para a\u00f1adir a nuestra cadena una variable, hacemos uso de un marcador, representado con ${variable} . Esta \u00faltima forma es mucho mejor que concatenar cadenas con el signo de la suma, ya que nos aporta mucha m\u00e1s flexibilidad.","title":"Operadores y comillas"},{"location":"javascript/#bucles-y-condicionales","text":"La sintaxis tanto de los condicionales como de los bucles en este lenguaje es bastante simple. Existen los if , else , else if , switch , while y for . Sin embargo, existe un tipo de bucle que no todos los lenguajes poseen y que puede resultar muy interesante, el cual nos ayuda a recorrer elementos dentro de, por ejemplo, un array. Para ello, hacemos uso de la palabra reservada in . Con el ejemplo que se muestra a continuaci\u00f3n, mostrar\u00edamos por pantalla uno a uno los elementos del array array .","title":"Bucles y condicionales"},{"location":"javascript/#funciones","text":"En JavaScript, las funciones se declaran con la palabra clave function . Al igual que con las variables, declaramos la funci\u00f3n pero no el tipo de dato que esta va a devolver. Tambi\u00e9n, este lenguaje nos permite guardar estas funciones en variables, las cuales podemos utilizar posteriormente en el c\u00f3digo para llamar a la funci\u00f3n. El c\u00f3digo que se muestra a continuaci\u00f3n muestra 2 formas identicas de declarar una funci\u00f3n add . Hay infinidad de caracter\u00edsticas de las funciones en JavaScript que no veremos en este taller ya que son m\u00e1s espec\u00edficas (palabra clave arguments , \u00e1mbito de las variables, funciones anidadas, par\u00e1metros por defecto, etc.). Lo que s\u00ed veremos son las cada vez m\u00e1s usadas funciones flecha . Estas funciones poseen una sintaxis que puede ser un poco confusa al principio, pero se utilizan de la misma forma y nos ayudan a escribir menos c\u00f3digo de una forma m\u00e1s intuitiva. Consisten en eliminar la palabra clave function , haciendo uso de la flecha => . En el ejemplo de abajo, tambi\u00e9n se muestra el caso en el que nuestra funci\u00f3n simplemente devuelve un valor, por lo que podemos expresar la funci\u00f3n en una sola l\u00ednea y sin return .","title":"Funciones"},{"location":"proyecto/","text":"Proyecto \u00b6 Despu\u00e9s de toda esta explicaci\u00f3n, vamos a realizar las configuraciones necesarias para poder trabajar con TypeScript. Instalaci\u00f3n de TypeScript \u00b6 Debemos tener instalado TypeScript para poder trabajar con \u00e9l. Para ello debemos tener instalado node y npm. La instalaci\u00f3n depende del sistema operativo, aunque en algunos sistemas Linux (entre ellos Ubuntu) lo podemos hacer desde terminal con los siguientes comandos. $ sudo apt update $ sudo apt install nodejs $ sudo apt install npm $ sudo npm install -g typescript Creaci\u00f3n del proyecto \u00b6 Una vez realizadas las instalaciones, en la carpeta en la que queramos iniciar nuestro proyecto, introduciremos lo siguiente: $ tsc --init Lo que har\u00e1 esto es crearnos en nuestra carpeta el archivo de configuraci\u00f3n de TypeScript tsconfig.json . Este archivo contiene configuraci\u00f3n muy variada, como a que versi\u00f3n de ECMASCRIPT se trasnpilar\u00e1 el c\u00f3digo, o la carpeta en la que se generar\u00e1 nuestro archivo JavaScript transpilado. Para elegir la carpeta, descomentaremos la l\u00ednea en la que aparece \"outDir\" , e introduciremos la carpeta donde queramos guardar nuestro archivo transpilado. En nuestro caso lo haremos en la carpeta ./build . Como esta al principio no existe, se crear\u00e1 autom\u00e1ticamente cuando transpilemos el c\u00f3digo TypeScript por primera vez. Ahora toca crear nuestro archivo TypeScript donde trabajaremos. Mostramos el siguiente ejemplo de c\u00f3digo que transpilaremos en el siguiente paso a JavaScript. Transpilar a JavaScript \u00b6 Para transpilar el c\u00f3digo a JavaScript, utilizamos el siguiente comando: $ tsc --build Esto lo que har\u00e1 es generarnos el archivo JavaScript correspondiente en la carpeta que especificamos anteriormente. Vemos que el archivo generado no contiene informaci\u00f3n ninguna acerca de los tipos. Cada vez que realicemos alg\u00fan cambio en el archivo TypeScript, debemos utilizar el comando tsc --build para generar el fichero JavaScript correspondiente, lo cual puede ser bastante pesado. Para evitar esto, existe el siguiente comando: $ tsc --watch Lo que hace esto es activar el modo observador (watcher), el cual transpilar\u00e1 nuestro c\u00f3digo autom\u00e1ticamente cada vez que guardemos los cambios de nuestro archivo TypeScript. Ejecutar nuestro c\u00f3digo \u00b6 Ejecutar TypeScript no es posible, por ello es por lo que lo transpilamos a JavaScript. Para ejecutarlo, hacemos uso de node, el cual lo hemos instalado previamente. El siguiente comando nos permite ejecutar el archivo y ver el resultado por el terminal. $ node build/index.js","title":"Proyecto"},{"location":"proyecto/#proyecto","text":"Despu\u00e9s de toda esta explicaci\u00f3n, vamos a realizar las configuraciones necesarias para poder trabajar con TypeScript.","title":"Proyecto"},{"location":"proyecto/#instalacion-de-typescript","text":"Debemos tener instalado TypeScript para poder trabajar con \u00e9l. Para ello debemos tener instalado node y npm. La instalaci\u00f3n depende del sistema operativo, aunque en algunos sistemas Linux (entre ellos Ubuntu) lo podemos hacer desde terminal con los siguientes comandos. $ sudo apt update $ sudo apt install nodejs $ sudo apt install npm $ sudo npm install -g typescript","title":"Instalaci\u00f3n de TypeScript"},{"location":"proyecto/#creacion-del-proyecto","text":"Una vez realizadas las instalaciones, en la carpeta en la que queramos iniciar nuestro proyecto, introduciremos lo siguiente: $ tsc --init Lo que har\u00e1 esto es crearnos en nuestra carpeta el archivo de configuraci\u00f3n de TypeScript tsconfig.json . Este archivo contiene configuraci\u00f3n muy variada, como a que versi\u00f3n de ECMASCRIPT se trasnpilar\u00e1 el c\u00f3digo, o la carpeta en la que se generar\u00e1 nuestro archivo JavaScript transpilado. Para elegir la carpeta, descomentaremos la l\u00ednea en la que aparece \"outDir\" , e introduciremos la carpeta donde queramos guardar nuestro archivo transpilado. En nuestro caso lo haremos en la carpeta ./build . Como esta al principio no existe, se crear\u00e1 autom\u00e1ticamente cuando transpilemos el c\u00f3digo TypeScript por primera vez. Ahora toca crear nuestro archivo TypeScript donde trabajaremos. Mostramos el siguiente ejemplo de c\u00f3digo que transpilaremos en el siguiente paso a JavaScript.","title":"Creaci\u00f3n del proyecto"},{"location":"proyecto/#transpilar-a-javascript","text":"Para transpilar el c\u00f3digo a JavaScript, utilizamos el siguiente comando: $ tsc --build Esto lo que har\u00e1 es generarnos el archivo JavaScript correspondiente en la carpeta que especificamos anteriormente. Vemos que el archivo generado no contiene informaci\u00f3n ninguna acerca de los tipos. Cada vez que realicemos alg\u00fan cambio en el archivo TypeScript, debemos utilizar el comando tsc --build para generar el fichero JavaScript correspondiente, lo cual puede ser bastante pesado. Para evitar esto, existe el siguiente comando: $ tsc --watch Lo que hace esto es activar el modo observador (watcher), el cual transpilar\u00e1 nuestro c\u00f3digo autom\u00e1ticamente cada vez que guardemos los cambios de nuestro archivo TypeScript.","title":"Transpilar a JavaScript"},{"location":"proyecto/#ejecutar-nuestro-codigo","text":"Ejecutar TypeScript no es posible, por ello es por lo que lo transpilamos a JavaScript. Para ejecutarlo, hacemos uso de node, el cual lo hemos instalado previamente. El siguiente comando nos permite ejecutar el archivo y ver el resultado por el terminal. $ node build/index.js","title":"Ejecutar nuestro c\u00f3digo"},{"location":"referencias/","text":"Referencias \u00b6 JavaScript MDN Web Docs Aclarando las diferentes versiones del lenguaje TypeScript documentaci\u00f3n oficial Generics en TypeScript","title":"Referencias"},{"location":"referencias/#referencias","text":"JavaScript MDN Web Docs Aclarando las diferentes versiones del lenguaje TypeScript documentaci\u00f3n oficial Generics en TypeScript","title":"Referencias"},{"location":"typescript/","text":"TypeScript \u00b6 Ahora s\u00ed, vamos a profundizar en por qu\u00e9 TypeScript es cada vez m\u00e1s usado y en cuales son sus principales ventajas. Inconvenientes de JavaScript \u00b6 Imaginemos el siguiente c\u00f3digo JavaScript, donde accedemos a la propiedad i del objeto punto , la cual no existe. Vemos que JavaScript nos informa de que \"puede que la propiedad i no exista\" y es cuando ejecutamos el c\u00f3digo cuando nos damos cuenta de que tenemos un error. En TypeScript esto es totalmente distinto, ya que nos informa de antemano de que tenemos un error, no haciendo falta ejecutar el c\u00f3digo para darnos cuenta. A\u00fan as\u00ed, aunque JavaScript no nos muestre el error de forma tan flagrante, no ser\u00eda necesario usar TypeScript para darnos cuenta de este, \u00bfno?. Bueno, pongamos el ejemplo de que es una funci\u00f3n la que recibe un punto, y que dentro de esa funcion accedemos a los par\u00e1metros de esta variable. Vemos que perfectamente podemos acceder a campos de un objeto que no existen, sin que JavaScript nos muestre ning\u00fan error. Cuando llamemos a esta funci\u00f3n en nuestro c\u00f3digo y le pasemos un dato punto , obtendremos el error. Puede que en este caso sea un error f\u00e1cil de entender y de corregir, pero imaginemos que esto nos ocurre en un proyecto grande, con numerosos ficheros todos ellos de cientos de l\u00edneas de c\u00f3digo. Obtendremos errores inesperados que muchas veces ser\u00e1n muy dif\u00edciles de encontrar debido a problemas como este. Es ah\u00ed donde TypeScript marca la diferencia. Tipado: La gran ventaja de TypeScript \u00b6 Por defecto, al crear variables en JavaScript, no tienen ning\u00fan tipo. Aunque esto no es del todo cierto. Estas son del tipo any , lo cual tiene sentido, ya que podemos igualar una variable a cualquier tipo de dato. Este es el motivo por el que podemos obtener errores como los mostrados en los ejemplos anteriores. Para evitarlos, hacemos uso de la gran caracter\u00edstica de TypeScript: el tipado. No hemos parado de ver durante el taller que, al crear variables y funciones en JavaScript, nunca se especifica el tipo de dato que estas tendr\u00e1n. Esto nos aporta flexibilidad, pero nos arriesgamos a obtener errores inesperados, los cuales ser\u00edan muy f\u00e1ciles de detectar si us\u00e1ramos TypeScript. Para indicar el tipo de dato que tendr\u00e1 una variable, utilizamos el s\u00edmbolo : , acompa\u00f1ado del tipo de dato en cuesti\u00f3n. Para las funciones es exactamente igual, otorgando un tipo tanto a los argumentos como a la propia funci\u00f3n. Interfaces \u00b6 Las interfaces pueden ser entendidas como estructuras las cuales especifican un \"contrato\". Este contrato debe de ser cumplido por todas las variables que quieran utilizarla como \"modelo\". Veamos un ejemplo. Imaginemos que queremos crear una funci\u00f3n que solo reciba una variable de tipo Persona . Este objeto tendr\u00e1 las propiedades nombre , edad y altura . Adem\u00e1s, queremos que cuente con otro par\u00e1metro estado que sea opcional. Para asegurarnos de que la funci\u00f3n pueda recibir solamente objetos de este tipo, definimos la interfaz Persona haciendo uso de la palabra clave interface . \u00bfQu\u00e9 ventajas nos da esto? Pues que la funci\u00f3n datosPersona recibir\u00e1 s\u00ed o s\u00ed como par\u00e1metro un objeto de tipo Persona . Si este objeto no fuera de ese tipo, obtendr\u00edamos el error en tiempo de desarrollo , lo cual nos evita obtener errores inesperados en tiempo de ejecuci\u00f3n. Tambi\u00e9n podemos utilizar interfaces para, por ejemplo, crear arrays de objetos del tipo que nosotros deseemos. Uniones de tipo \u00b6 Las uniones de tipo son una forma de declarar que una variable u objeto puede ser de m\u00e1s de un tipo. Para ello haremos uso de type y de | . Si ahora quisi\u00e9ramos declarar una variable del tipo estado el cual acabamos de crear, esta solo puede tomar 2 valores: 'abierto' o 'cerrado' . Lo mismo ocurre con los dem\u00e1s tipos que hemos definido. Generics \u00b6 Los generics en TypeScript (en espa\u00f1ol gen\u00e9ricos) son construcciones disponibles en lenguajes como Java y C++, pero no en otros como JavaScript. Estos nos ayudan a, entre otras cosas, definir \"plantillas\" que nos ahorren escribir c\u00f3digo duplicado. Veamos esto con un ejemplo. Imaginemos que queremos crear la funci\u00f3n getValue , la cual nos retorne un valor, una para que nos devuelva un number y otra que nos devuelva un string . Para ello tenemos varias opciones: Definir una funci\u00f3n para cada caso, lo cual no es lo \u00f3ptimo ya que tendr\u00edamos c\u00f3digo duplicado. Definir tanto la funci\u00f3n como el par\u00e9mtro de tipo any , lo cual es posible en TypeScript. Esta opci\u00f3n tampoco es la mejor, ya que perder\u00edamos toda la ayuda en tiempo de desarrollo que nos ofrece el lenguaje, pudiendo obtener errores inesperados en tiempo de ejecuci\u00f3n. Utilizar generics, lo cual es la mejor alternativa. En nuestro caso utilizaremos el tipo de dato T La sintaxis de estos consiste en declararlo de la siguiente forma: <T> siendo T el tipo de dato \"gen\u00e9rico\" que va a tratar nuestra funci\u00f3n.","title":"TypeScript"},{"location":"typescript/#typescript","text":"Ahora s\u00ed, vamos a profundizar en por qu\u00e9 TypeScript es cada vez m\u00e1s usado y en cuales son sus principales ventajas.","title":"TypeScript"},{"location":"typescript/#inconvenientes-de-javascript","text":"Imaginemos el siguiente c\u00f3digo JavaScript, donde accedemos a la propiedad i del objeto punto , la cual no existe. Vemos que JavaScript nos informa de que \"puede que la propiedad i no exista\" y es cuando ejecutamos el c\u00f3digo cuando nos damos cuenta de que tenemos un error. En TypeScript esto es totalmente distinto, ya que nos informa de antemano de que tenemos un error, no haciendo falta ejecutar el c\u00f3digo para darnos cuenta. A\u00fan as\u00ed, aunque JavaScript no nos muestre el error de forma tan flagrante, no ser\u00eda necesario usar TypeScript para darnos cuenta de este, \u00bfno?. Bueno, pongamos el ejemplo de que es una funci\u00f3n la que recibe un punto, y que dentro de esa funcion accedemos a los par\u00e1metros de esta variable. Vemos que perfectamente podemos acceder a campos de un objeto que no existen, sin que JavaScript nos muestre ning\u00fan error. Cuando llamemos a esta funci\u00f3n en nuestro c\u00f3digo y le pasemos un dato punto , obtendremos el error. Puede que en este caso sea un error f\u00e1cil de entender y de corregir, pero imaginemos que esto nos ocurre en un proyecto grande, con numerosos ficheros todos ellos de cientos de l\u00edneas de c\u00f3digo. Obtendremos errores inesperados que muchas veces ser\u00e1n muy dif\u00edciles de encontrar debido a problemas como este. Es ah\u00ed donde TypeScript marca la diferencia.","title":"Inconvenientes de JavaScript"},{"location":"typescript/#tipado-la-gran-ventaja-de-typescript","text":"Por defecto, al crear variables en JavaScript, no tienen ning\u00fan tipo. Aunque esto no es del todo cierto. Estas son del tipo any , lo cual tiene sentido, ya que podemos igualar una variable a cualquier tipo de dato. Este es el motivo por el que podemos obtener errores como los mostrados en los ejemplos anteriores. Para evitarlos, hacemos uso de la gran caracter\u00edstica de TypeScript: el tipado. No hemos parado de ver durante el taller que, al crear variables y funciones en JavaScript, nunca se especifica el tipo de dato que estas tendr\u00e1n. Esto nos aporta flexibilidad, pero nos arriesgamos a obtener errores inesperados, los cuales ser\u00edan muy f\u00e1ciles de detectar si us\u00e1ramos TypeScript. Para indicar el tipo de dato que tendr\u00e1 una variable, utilizamos el s\u00edmbolo : , acompa\u00f1ado del tipo de dato en cuesti\u00f3n. Para las funciones es exactamente igual, otorgando un tipo tanto a los argumentos como a la propia funci\u00f3n.","title":"Tipado: La gran ventaja de TypeScript"},{"location":"typescript/#interfaces","text":"Las interfaces pueden ser entendidas como estructuras las cuales especifican un \"contrato\". Este contrato debe de ser cumplido por todas las variables que quieran utilizarla como \"modelo\". Veamos un ejemplo. Imaginemos que queremos crear una funci\u00f3n que solo reciba una variable de tipo Persona . Este objeto tendr\u00e1 las propiedades nombre , edad y altura . Adem\u00e1s, queremos que cuente con otro par\u00e1metro estado que sea opcional. Para asegurarnos de que la funci\u00f3n pueda recibir solamente objetos de este tipo, definimos la interfaz Persona haciendo uso de la palabra clave interface . \u00bfQu\u00e9 ventajas nos da esto? Pues que la funci\u00f3n datosPersona recibir\u00e1 s\u00ed o s\u00ed como par\u00e1metro un objeto de tipo Persona . Si este objeto no fuera de ese tipo, obtendr\u00edamos el error en tiempo de desarrollo , lo cual nos evita obtener errores inesperados en tiempo de ejecuci\u00f3n. Tambi\u00e9n podemos utilizar interfaces para, por ejemplo, crear arrays de objetos del tipo que nosotros deseemos.","title":"Interfaces"},{"location":"typescript/#uniones-de-tipo","text":"Las uniones de tipo son una forma de declarar que una variable u objeto puede ser de m\u00e1s de un tipo. Para ello haremos uso de type y de | . Si ahora quisi\u00e9ramos declarar una variable del tipo estado el cual acabamos de crear, esta solo puede tomar 2 valores: 'abierto' o 'cerrado' . Lo mismo ocurre con los dem\u00e1s tipos que hemos definido.","title":"Uniones de tipo"},{"location":"typescript/#generics","text":"Los generics en TypeScript (en espa\u00f1ol gen\u00e9ricos) son construcciones disponibles en lenguajes como Java y C++, pero no en otros como JavaScript. Estos nos ayudan a, entre otras cosas, definir \"plantillas\" que nos ahorren escribir c\u00f3digo duplicado. Veamos esto con un ejemplo. Imaginemos que queremos crear la funci\u00f3n getValue , la cual nos retorne un valor, una para que nos devuelva un number y otra que nos devuelva un string . Para ello tenemos varias opciones: Definir una funci\u00f3n para cada caso, lo cual no es lo \u00f3ptimo ya que tendr\u00edamos c\u00f3digo duplicado. Definir tanto la funci\u00f3n como el par\u00e9mtro de tipo any , lo cual es posible en TypeScript. Esta opci\u00f3n tampoco es la mejor, ya que perder\u00edamos toda la ayuda en tiempo de desarrollo que nos ofrece el lenguaje, pudiendo obtener errores inesperados en tiempo de ejecuci\u00f3n. Utilizar generics, lo cual es la mejor alternativa. En nuestro caso utilizaremos el tipo de dato T La sintaxis de estos consiste en declararlo de la siguiente forma: <T> siendo T el tipo de dato \"gen\u00e9rico\" que va a tratar nuestra funci\u00f3n.","title":"Generics"}]}